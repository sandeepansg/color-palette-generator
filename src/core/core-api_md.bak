# Core System API Documentation

## SystemManager Class

### Constructor
```javascript
new SystemManager()
```

### Methods

#### initialize(config)
Initialize the system with configuration options.
- **Parameters:**
  - `config` (Object) - Configuration object
- **Returns:** `Promise<boolean>` - Success status

#### getSystemInfo()
Get comprehensive system information.
- **Returns:** `Object` - System information including platform, capabilities, and fingerprint

#### getCacheManager()
Get cache manager instance.
- **Returns:** `CacheManager|null` - Cache manager instance

#### getThreadManager()
Get thread manager instance.
- **Returns:** `ThreadManager|null` - Thread manager instance

#### isInitialized()
Check if system is initialized.
- **Returns:** `boolean` - True if initialized

#### getPlatformOptimizations()
Get platform-specific optimization settings.
- **Returns:** `Object` - Optimization settings

#### cleanup()
Clean up system resources.
- **Returns:** `Promise<boolean>` - Success status

## CacheManager Class

### Constructor
```javascript
new CacheManager(config)
```

### Methods

#### initialize(deviceFingerprint)
Initialize cache manager with device fingerprint.
- **Parameters:**
  - `deviceFingerprint` (string) - Device fingerprint for cache directory
- **Returns:** `Promise<boolean>` - Success status

#### storeAsset(key, data, metadata)
Store asset in cache.
- **Parameters:**
  - `key` (string) - Asset key
  - `data` (ArrayBuffer|string) - Asset data
  - `metadata` (Object) - Asset metadata
- **Returns:** `Promise<boolean>` - Success status

#### retrieveAsset(key)
Retrieve asset from cache.
- **Parameters:**
  - `key` (string) - Asset key
- **Returns:** `Promise<Object|null>` - Cached asset or null

#### hasAsset(key)
Check if asset exists in cache.
- **Parameters:**
  - `key` (string) - Asset key
- **Returns:** `Promise<boolean>` - True if exists and not expired

#### clearCache()
Clear all cached assets.
- **Returns:** `Promise<boolean>` - Success status

#### getCacheStats()
Get cache statistics.
- **Returns:** `Object` - Cache statistics including hit rate and storage info

## ThreadManager Class

### Constructor
```javascript
new ThreadManager()
```

### Methods

#### initialize(maxThreads)
Initialize thread manager with specified thread count.
- **Parameters:**
  - `maxThreads` (number) - Maximum number of threads
- **Returns:** `Promise<boolean>` - Success status

#### executeTask(type, data)
Execute task in thread pool.
- **Parameters:**
  - `type` (string) - Task type ('calculateContrast', 'generatePermutations', 'validateSwatch')
  - `data` (Object) - Task data
- **Returns:** `Promise<*>` - Task result

#### getStats()
Get thread pool statistics.
- **Returns:** `Object` - Thread statistics

#### terminate()
Terminate all workers.
- **Returns:** `Promise<boolean>` - Success status

## DeviceDetector Class

### Constructor
```javascript
new DeviceDetector()
```

### Methods

#### initialize()
Initialize device detection.
- **Returns:** `Promise<Object>` - Detection results

#### generateFingerprint()
Generate device fingerprint for cache directory.
- **Returns:** `string` - Device fingerprint

#### getDetectionResults()
Get complete detection results.
- **Returns:** `Object` - Detection results including platform and capabilities

## Usage Examples

### Basic System Initialization
```javascript
const systemManager = new SystemManager();
const success = await systemManager.initialize({
  cacheEnabled: true,
  threadingEnabled: true,
  debugMode: false
});

if (success) {
  const systemInfo = systemManager.getSystemInfo();
  console.log('System ready:', systemInfo);
}
```

### Cache Operations
```javascript
const cacheManager = systemManager.getCacheManager();

// Store asset
await cacheManager.storeAsset('font-roboto', fontData, {
  type: 'font',
  format: 'woff2'
});

// Retrieve asset
const cachedFont = await cacheManager.retrieveAsset('font-roboto');
if (cachedFont) {
  console.log('Font loaded from cache');
}
```

### Thread Pool Usage
```javascript
const threadManager = systemManager.getThreadManager();

// Calculate WCAG contrast
const contrast = await threadManager.executeTask('calculateContrast', {
  color1: '#FF0000',
  color2: '#FFFFFF'
});

// Generate color permutations
const permutations = await threadManager.executeTask('generatePermutations', {
  colors: ['#FF0000', '#00FF00', '#0000FF'],
  count: 3
});
```