        // Canvas functions
        function initializeCanvas() {
            canvas = document.getElementById('businessCard');
            ctx = canvas.getContext('2d');
            updateCanvasDimensions();
            generateWCAGPalette();
            setupEventListeners();
            setupKeyboardShortcuts();
            setupDragAndDrop();
        }

        function updateCanvasDimensions() {
            const dimensions = CARD_DIMENSIONS[currentConfig.standard][currentConfig.orientation];
            canvas.width = dimensions.width;
            canvas.height = dimensions.height;
        }

        function generateCard() {
            // Clear canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Draw components in order
            drawBackground();
            generateBackgroundElements();
            drawLogoArea();
            drawContactInfo();
            drawBorder();
        }

        function drawBackground() {
            // Create gradient background
            const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
            gradient.addColorStop(0, '#ffffff');
            gradient.addColorStop(1, '#f8f9fa');
            
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, canvas.width, canvas.height);
        }

        function generateBackgroundElements() {
            currentConfig.elements = [];
            const elementCount = randomInt(8, 15);
            
            for (let i = 0; i < elementCount; i++) {
                const element = {
                    type: randomChoice(SHAPE_TYPES),
                    x: randomFloat(0, canvas.width),
                    y: randomFloat(0, canvas.height),
                    size: randomFloat(20, 100),
                    color: randomChoice(currentConfig.colorPalette).hex,
                    opacity: randomFloat(0.1, 0.3),
                    rotation: randomFloat(0, 360),
                    bezierPoints: generateBezierPoints(),
                    spikes: randomInt(3, 8),
                    amplitude: randomFloat(10, 50)
                };
                
                // Apply chaos level offset
                const chaosOffset = (currentConfig.chaosLevel / 100) * 50;
                element.x += randomFloat(-chaosOffset, chaosOffset);
                element.y += randomFloat(-chaosOffset, chaosOffset);
                
                currentConfig.elements.push(element);
                drawElement(element);
            }
        }

        function generateBezierPoints() {
            const points = [];
            for (let i = 0; i < 4; i++) {
                points.push({
                    x: randomFloat(-50, 50),
                    y: randomFloat(-50, 50)
                });
            }
            return points;
        }

        function drawElement(element) {
            ctx.save();
            ctx.translate(element.x, element.y);
            ctx.rotate(element.rotation * Math.PI / 180);
            ctx.fillStyle = element.color;
            ctx.globalAlpha = element.opacity;
            
            switch (element.type) {
                case 'circle':
                    drawCircle(element);
                    break;
                case 'square':
                    drawSquare(element);
                    break;
                case 'triangle':
                    drawTriangle(element);
                    break;
                case 'line':
                    drawLine(element);
                    break;
                case 'organic':
                    drawOrganicShape(element);
                    break;
                case 'hexagon':
                    drawHexagon(element);
                    break;
                case 'star':
                    drawStar(element);
                    break;
                case 'wave':
                    drawWave(element);
                    break;
            }
            
            ctx.restore();
        }

        function drawCircle(element) {
            ctx.beginPath();
            ctx.arc(0, 0, element.size / 2, 0, Math.PI * 2);
            ctx.fill();
        }

        function drawSquare(element) {
            ctx.fillRect(-element.size / 2, -element.size / 2, element.size, element.size);
        }

        function drawTriangle(element) {
            ctx.beginPath();
            ctx.moveTo(0, -element.size / 2);
            ctx.lineTo(-element.size / 2, element.size / 2);
            ctx.lineTo(element.size / 2, element.size / 2);
            ctx.closePath();
            ctx.fill();
        }

        function drawLine(element) {
            ctx.strokeStyle = element.color;
            ctx.lineWidth = element.size / 10;
            ctx.beginPath();
            ctx.moveTo(-element.size / 2, 0);
            ctx.lineTo(element.size / 2, 0);
            ctx.stroke();
        }

        function drawOrganicShape(element) {
            ctx.beginPath();
            ctx.moveTo(element.bezierPoints[0].x, element.bezierPoints[0].y);
            
            for (let i = 1; i < element.bezierPoints.length; i++) {
                const cp1 = element.bezierPoints[i - 1];
                const cp2 = element.bezierPoints[i];
                const end = element.bezierPoints[(i + 1) % element.bezierPoints.length];
                
                ctx.bezierCurveTo(cp1.x, cp1.y, cp2.x, cp2.y, end.x, end.y);
            }
            
            ctx.closePath();
            ctx.fill();
        }

        function drawHexagon(element) {
            ctx.beginPath();
            for (let i = 0; i < 6; i++) {
                const angle = (Math.PI / 3) * i;
                const x = Math.cos(angle) * element.size / 2;
                const y = Math.sin(angle) * element.size / 2;
                
                if (i === 0) {
                    ctx.moveTo(x, y);
                } else {
                    ctx.lineTo(x, y);
                }
            }
            ctx.closePath();
            ctx.fill();
        }

        function drawStar(element) {
            ctx.beginPath();
            for (let i = 0; i < element.spikes * 2; i++) {
                const angle = (Math.PI / element.spikes) * i;
                const radius = i % 2 === 0 ? element.size / 2 : element.size / 4;
                const x = Math.cos(angle) * radius;
                const y = Math.sin(angle) * radius;
                
                if (i === 0) {
                    ctx.moveTo(x, y);
                } else {
                    ctx.lineTo(x, y);
                }
            }
            ctx.closePath();
            ctx.fill();
        }

        function drawWave(element) {
            ctx.beginPath();
            ctx.moveTo(-element.size / 2, 0);
            
            for (let x = -element.size / 2; x <= element.size / 2; x += 5) {
                const y = Math.sin((x / element.size) * Math.PI * 2) * element.amplitude;
                ctx.lineTo(x, y);
            }
            
            ctx.strokeStyle = element.color;
            ctx.lineWidth = element.size / 20;
            ctx.stroke();
        }

        function drawContactInfo() {
            const centerX = canvas.width / 2;
            const centerY = canvas.height / 2;
            const chaosOffset = currentConfig.chaosLevel / 100 * 20;
            
            // Primary group (name and title)
            const primaryGroup = [
                { 
                    text: currentConfig.contact.nameEnglish, 
                    fontSize: Math.min(canvas.width / 25, 32), 
                    fontWeight: 'bold',
                    font: currentConfig.typography.primaryFont
                },
                { 
                    text: currentConfig.contact.nameLocal, 
                    fontSize: Math.min(canvas.width / 35, 24),
                    fontWeight: 'normal',
                    font: currentConfig.typography.primaryFont
                },
                { 
                    text: currentConfig.contact.jobTitle, 
                    fontSize: Math.min(canvas.width / 40, 20),
                    fontWeight: '500',
                    font: currentConfig.typography.accentFont
                }
            ];
            
            // Secondary group (contact details)
            const secondaryGroup = [
                { 
                    text: currentConfig.contact.phone, 
                    fontSize: Math.min(canvas.width / 50, 16),
                    fontWeight: 'normal',
                    font: currentConfig.typography.secondaryFont
                },
                { 
                    text: currentConfig.contact.email, 
                    fontSize: Math.min(canvas.width / 50, 16),
                    fontWeight: 'normal',
                    font: currentConfig.typography.secondaryFont
                }
            ];
            
            // Draw groups with chaos-based positioning
            drawTextGroup(primaryGroup, centerX, centerY